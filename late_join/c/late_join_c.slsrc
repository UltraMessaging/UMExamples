/* late_join.c - see http://ultramessaging.github.io/UMExamples/late_join/c/index.html
 *
 * Copyright (c) 2005-2017 Informatica Corporation. All Rights Reserved.
 * Permission is granted to licensees to use
 * or alter this software for any purpose, including commercial applications,
 * according to the terms laid out in the Software License Agreement.
 *
 * This source code example is provided by Informatica for educational
 * and evaluation purposes only.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND INFORMATICA DISCLAIMS ALL WARRANTIES
 * EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY IMPLIED WARRANTIES OF
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR
 * PURPOSE.  INFORMATICA DOES NOT WARRANT THAT USE OF THE SOFTWARE WILL BE
 * UNINTERRUPTED OR ERROR-FREE.  INFORMATICA SHALL NOT, UNDER ANY CIRCUMSTANCES, BE
 * LIABLE TO LICENSEE FOR LOST PROFITS, CONSEQUENTIAL, INCIDENTAL, SPECIAL OR
 * INDIRECT DAMAGES ARISING OUT OF OR RELATED TO THIS AGREEMENT OR THE
 * TRANSACTIONS CONTEMPLATED HEREUNDER, EVEN IF INFORMATICA HAS BEEN APPRISED OF
 * THE LIKELIHOOD OF SUCH DAMAGES.
 */

#include <stdio.h>

#if defined(_MSC_VER)
/* Windows-only includes */
#include <winsock2.h>
#define SLEEP(s) Sleep((s)*1000)
#else
/* Unix-only includes */
#include <stdlib.h>
#include <unistd.h>
#define SLEEP(s) sleep(s)
#endif

#include <lbm/lbm.h>

/* Example error checking macro.  Include after each UM call. */
#define EX_LBM_CHK(err) do { \
	if ((err) < 0) { \
		fprintf(stderr, "%s:%d, lbm error: '%s'\n", \
			__FILE__, __LINE__, lbm_errmsg()); \
		exit(1); \
	}  \
} while (0)


/* Received message handler (passed into lbm_rcv_create()) */
int rcv_handle_msg(lbm_rcv_t *rcv, lbm_msg_t *msg, void *clientd)
{
	/* =semlit,block,callback= */
	switch (msg->type) {
	case LBM_MSG_DATA:
		if (msg->flags & LBM_MSG_FLAG_RETRANSMIT)
			printf("Processing Late Join Message. SQN: %d\n", msg->sequence_number);
		else if (msg->flags & LBM_MSG_FLAG_OTR)
			printf("Processing OTR Message. SQN: %d\n", msg->sequence_number);
		else
			printf("Normal Message. SQN: %d\n", msg->sequence_number);

		/* some processing */
		/* =semlit,endblock,callback= */
		break;
	case LBM_MSG_BOS:
		printf("Beggining of transport.\n");
		break;
	case LBM_MSG_EOS:
		printf("End of transport.\n");
		break;
	default:
		printf("Unknown lbm_msg_t type %x [%s][%s]\n", msg->type, msg->topic_name, msg->source);
		break;
	}
	return 0;
}  /* rcv_handle_msg */


int main(int argc, char **argv)
{
	lbm_context_t *ctx;     /* pointer to context object */
	lbm_topic_t *topic_1;   /* pointer to topic object */
	lbm_src_t *early_src;   /* pointer to source object */
	lbm_rcv_t *late_rcv;    /* pointer to receiver object */
	lbm_topic_t *rtopic;    /* pointer to receiver topic object */
	lbm_src_topic_attr_t *tattr;    /* pointer to source attribute object */
	int err;

#if defined(_MSC_VER)
	/* windows-specific code */
	WSADATA wsadata;
	int wsStat = WSAStartup(MAKEWORD(2, 2), &wsadata);
	if (wsStat != 0)
	{
		printf("line %d: wsStat=%d\n", __LINE__, wsStat);
		exit(1);
	}
#endif

	/* Creating the context */
	err = lbm_context_create(&ctx, NULL, NULL, NULL);
	EX_LBM_CHK(err);

	/* Initializing the source attribute object */
	err = lbm_src_topic_attr_create(&tattr);
	EX_LBM_CHK(err);

	/* Setting the transport via the source topic string method */
	/* =semlit,block,enable_lj= */
	err = lbm_src_topic_attr_str_setopt(tattr, "late_join", "1");
	EX_LBM_CHK(err);
	/* =semlit,endblock,enable_lj= */
	/* =semlit,block,configure_lj= */
	err = lbm_src_topic_attr_str_setopt(tattr, "retransmit_retention_size_threshold", "1");
	EX_LBM_CHK(err);
	/* =semlit,endblock,configure_lj= */

	/* Allocating the source topic */
	err = lbm_src_topic_alloc(&topic_1, ctx, "test.topic", tattr);
	EX_LBM_CHK(err);

	/* Creating the source */
	/* =semlit,block,source= */
	err = lbm_src_create(&early_src, ctx, topic_1, NULL, NULL, NULL);
	EX_LBM_CHK(err);

	/* Wait for topic resolution to happen */
	SLEEP(1);

	/* Send a message... we should expect no one to get it because we haven't
	 * created the receiver yet. */
	err = lbm_src_send(early_src, "Hello!", 6, LBM_MSG_FLUSH | LBM_SRC_BLOCK);
	/* =semlit,endblock,source= */
	EX_LBM_CHK(err);

	err = lbm_rcv_topic_lookup(&rtopic, ctx, "test.topic", NULL);
	EX_LBM_CHK(err);
	/* =semlit,block,receiver= */
	err = lbm_rcv_create(&late_rcv, ctx, rtopic, rcv_handle_msg, NULL, NULL);
	/* =semlit,endblock,receiver= */
	EX_LBM_CHK(err);

	SLEEP(100000);

	/* Finished with all LBM functions, delete the receiver and context object.
	 * Delete the source topic attribute objects. */
	err = lbm_src_topic_attr_delete(tattr);
	EX_LBM_CHK(err);

	/* Finished with all LBM functions, delete the source and context object. */
	/* =semlit,block,cleanup= */
	err = lbm_src_delete(early_src);
	EX_LBM_CHK(err);
	err = lbm_rcv_delete(late_rcv);
	EX_LBM_CHK(err);
	err = lbm_context_delete(ctx);
	EX_LBM_CHK(err);
	/* =semlit,endblock,cleanup= */

#if defined(_MSC_VER)
	WSACleanup();
#endif
	return 0;
}  /* main */
