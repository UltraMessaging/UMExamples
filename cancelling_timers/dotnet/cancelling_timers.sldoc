<html>
  <head>
    <link rel="stylesheet" href="../../style/main.css" type="text/css" media="screen" />
    <title>Scheduling UM Timers</title>
  </head>
  <body>
    <a href="../../index.html" class="button" target="_top">Example index</a>
    <h1>Cancelling UM Timer Callbacks</h1>
    <p>Ultra Messaging has a feature where developers can schedule timer function callbacks via the API, where
       the desired function is executed in a desired number of milliseconds from when it was scheduled. Applications also have
       the ability to cancel scheduled timers that have not yet executed, however special care must be taken when cancelling timer
       callbacks.</p>
    <p>In this example, the application will schedule a timer callback to execute in 10 seconds. The main thread
       that scheduled the timer will wait 1 second after scheduling, then proceed to safely cancel the timer.</p>
    <p>Special care must be taken because it is very important that an application not cancel a timer that has already
       been executed or has already been cancelled. Cancelling an old or cancelled timer could have irreparable consequences
       on the underlying UM library itself. Therefore, users must create a small state object around the timer hanldle, and
       be sure to take into account threading considerations (since the callback executes on the context thread, and cancelling
       it can happen on any thread).</p>
    <p><b>Note: </b>This sample only works when scheduling timers that do not use an event queue.</p>
    <p>
    <p>There is one program source file:</p>
    <ul>
      <li><b><tt>=semlit,srcfile,cancelling_timers_dotnet.slsrc,CancellingTimers.cs=</tt></b>
        - (right-click and save as "CancellingTimers.cs") main program.</li>
    </ul>
    <h2>Program explanation: <tt>CancellingTimers.cs</tt></h2>
    <h4>Timer State Object</h4>
	<p>The purpose of the state object is to be able to determine the state of the timer callback at any timer, as well as store the handler
	for the timer so it can be cancelled. In addition to state and the timer handle, there is also a sync semaphore used to sync the main application
	thread with the context thread in the event of a timer being cancelled.</p>
	=semlit,insert,timer_cb_object=
    <h4>Initializing the Context</h4>
        <p>Standard context attribute initializtion and context creation code. For more information on creating a context, please see the example
          <a href="../context-create">Creating a Context</a></p>
        =semlit,insert,ctx_create=
    <h4>Creating a Timer Callback</h4>
	<p>The callback function defined below is the application callback that will be invoked when the scheduled timer expires. This callback will
	not end up being executed though, because it will be cancelled well in advance</p>
	=semlit,insert,timer_cb=
    <h4>Creating a Cancel Callback</h4>
	<p>This is the key point in the cancel timer sample, cancelling the timer using a "zero" timer callback. A zero timer callback is a scheduled
	timer with a time value of 0, therefore is will execute nearly immediately (as soon as the context is ready). This is necessary because it
	ensures that the actual cancel call happens prior to the timer being executed, since they both happen on the context thread, though this cannot
	be guaranteed. What is guaranteed is that either the timer will be cancelled as expected, or the timer callback will execute and the stale handle
	will not be cancelled (which is what's really important).</p>
	=semlit,insert,cancel_cb=
    <h4>Scheduling the Timer Callback</h4>
	<p>Here the application is actually scheduling the callback timer, set to be executed in 10000 milliseconds. The return value must be saved
	by the application since the application wishes to cancel the timer before it executes. This is also where we set the initial state inside the 
	statee object, set to PENDING</p>
	=semlit,insert,schedule_timer=
    <h4>Cancelling the Timer and Waiting</h4>
	<p>To initiate the cancel, first the application thread should check to see that the timer state is still PENDING. If so, schedule the cancel
	callback, and pass in the state object as the client data variable. Once the cancel timer is scheduled, wait on the semaphore for the cancel callback
	to complete.</p>
	=semlit,insert,cancel_timer=
  </body>
</html>
