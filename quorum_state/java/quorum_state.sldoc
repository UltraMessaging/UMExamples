<html>
  <head>
    =semlit,include,../../style/head.sldoc=
    <title>Track quorum for a source</title>
  </head>
  <body>
    =semlit,include,../intro.sldoc=
    <p>There is one program source file, and a store configuration XML:</p>
    <ul>
      <li><b><tt>=semlit,srcfile,quorum_state_java.slsrc,QuorumState.java=</tt></b></li>
      <li><b><tt>=semlit,srcfile,../quorum_state_store.slsrc,store.xml=</tt></b></li>
    </ul>
    <h2>Program explanation: <tt>quorum_state.c</tt></h2>
    <h4>Create a state variable</h4>
        <p>In this example, the application will simply track whether the source has quorum using a global interger, src_ready. src_ready will
	  initialize as 0, because the source upon creation will not be in a state where it can send.</p>
        =semlit,insert,src_ready_int=
    <h4>Create the context and source</h4>
        <p>Standard context attribute initializtion and context creation code. For more information on creating a context, please see the example
          <a href="../context-create">Creating a Context. </a>Note that the application is explicitly setting
          =semlit,tooltip,../../tooltips/source_ume_store.txt,ume_store=and =semlit,tooltip,../../tooltips/source_ume_store_behavior.txt,ume_store_behavior=</p>
        =semlit,insert,ctx_src_create=
    <h4>Setting the state</h4>
        <p>After the state is iniialized to 0 (not ready), setting the state to 1 (ready) and potentially back to 0 is entirely handled within the
          source event callback handler. Setting the state to ready should be done when registration completes. The registration complete event
          is executed when the source has completed registration with at least a quorum of stores, possibly more depending on the sources
          =semlit,tooltip,../../tooltips/source_ume_consensus_sequence_number_behavior.txt,ume_consensus_sequence_number_behavior=. The registration
          complete event should not be confused with the registration success event, which simply indicates successful registration with a single
          store. Setting the state in the registration complete event can look like this:</p>
        =semlit,insert,reg_complete=
        <p>Setting the state back to 0 (not ready) should only be done during the unresponsive event, and only if the string in the unresponsive error
          contains the "quorum lost" message. The unresponsive event is delivered whenever the source loses registration to a single store, however
          this alone does not indicate that the source has lost quorum. Therefore, the application must do a string compare on the error message to
          determine if quorum has actually been lost, like so:</p>
        =semlit,insert,unresponsive=
        <p>Once quorum has been lost and the state has been reset to 0, the source must again wait for another registration complete event again
          before it should try sending again. The logic from the registration complete event is already good enough to cover re-registrations.<p>
    <h4>Main Send Loop</h4>
        <p>For the purpose of this example, the application is simply going to tight loop forever sending messages, and printing a message
          to stdout when the source is not in the ready state</p>
        =semlit,insert,main_send_loop=
    <h4>Send a Message</h4>
	<p>Here the application is first going to make sure the application is ready to send. If src_ready is set to 1, then registration has completed
	  and the source should be able to send. If src_ready is 0, then registration has not completed, or the application has lost quorum and was 
	  notified via the unresponsive source event; in either case the source cannot send.</p>
        =semlit,insert,src_send=
    <h4>Store Configuration XML</h4>
        <p>This is a store configuration file that can be used to run the umestored binary along with this example application</p>
        =semlit,insert,store_xml=
  </body>
</html>
