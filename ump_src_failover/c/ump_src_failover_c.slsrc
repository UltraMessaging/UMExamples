/* ump_src_failover.c */

/* =semlit,block,includes=*/
#include <stdio.h>
#include <string.h>

#if defined(_MSC_VER)
/* Windows-only includes */
#include <winsock2.h>
#define SLEEP(s) Sleep((s)*1000)
#else
/* Unix-only includes */
#include <stdlib.h>
#include <unistd.h>
#define SLEEP(s) sleep(s)
#endif

#include <lbm/lbm.h>
/* =semlit,endblock,includes=*/

/* =semlit,block,sleep_macro=*/
#if defined(_WIN32)
#   define SLEEP_SEC(x) Sleep((x)*1000)
#else
#   define SLEEP_SEC(x) sleep(x)
#endif
/* =semlit,endblock,sleep_macro=*/

/* Example error checking macro.  Include after each UM call. */
/* =semlit,block,errors=*/
#define EX_LBM_CHK(err) do { \
  if ((err) < 0) { \
      fprintf(stderr, "%s:%d, lbm error: '%s'\n", \
      __FILE__, __LINE__, lbm_errmsg()); \
      exit(1); \
  }  \
} while (0)
/* =semlit,endblock,errors=*/

/* Store configurations */
/* =semlit,block,store_configs=*/
#define UMP_PRIMARY_STORE "127.0.0.1:29999"
#define UMP_PRIMARY_SESSION_ID "100"
#define UMP_SECONDARY_STORE "127.0.0.1:30000"
#define UMP_SECONDARY_SESSION_ID "200"
/* =semlit,endblock,store_configs=*/
/* =semlit,block,clear_store_configs=*/
#define UMP_CLEAR_STORE_CONFIG "0.0.0.0:0"
/* =semlit,endblock,clear_store_configs=*/

/* =semlit,block,app_src_struct=*/
typedef enum {NOT_INIT, INIT, READY, UNRESP} state_type_e;
typedef enum {PRIMARY, BACKUP} mode_type_e;
typedef struct app_src_s {
        lbm_context_t *ctx;
        lbm_src_t *src;
        state_type_e state;
        mode_type_e mode;
} app_src_s;
/* =semlit,endblock,app_src_struct=*/

/* Source event handler callback (passed into lbm_src_create()) */
int handle_src_event(lbm_src_t *src, int event, void *ed, void *cd)
{
        struct app_src_s *app_src = (struct app_src_s *)cd;
        switch (event) {
        /* Success event provided only for printing purposes */
        case LBM_SRC_EVENT_UME_REGISTRATION_SUCCESS_EX:
        {
                lbm_src_event_ume_registration_ex_t *reg = (lbm_src_event_ume_registration_ex_t *)ed;
                printf("UME store %u: %s registration success.\n", reg->store_index, reg->store);
                break;
        }
        /* =semlit,block,reg_complete=*/
        case LBM_SRC_EVENT_UME_REGISTRATION_COMPLETE_EX:
        {
                lbm_src_event_ume_registration_complete_ex_t *reg = (lbm_src_event_ume_registration_complete_ex_t *)ed;

                printf("UME registration complete. SQN %x.\n", reg->sequence_number);

                /* =semlit,block,update_state_ready=*/
                app_src->state = READY;
                /* =semlit,endblock,update_state_ready=*/
                break;
        }
        /* =semlit,endblock,reg_complete=*/
        /* =semlit,block,unresponsive=*/
        case LBM_SRC_EVENT_UME_STORE_UNRESPONSIVE:
        {
                const char *infostr = (const char *)ed;
                
                printf("UME store: %s\n", infostr);
                /* =semlit,block,update_state_UNRESP=*/
                if (strstr(infostr, "quorum lost") != NULL)
                        app_src->state = UNRESP;
                /* =semlit,endblock,update_state_UNRESP=*/
                break;
        }
        /* =semlit,endblock,unresponsive=*/
        }

        return 0;
}

int init_src(app_src_s *app_src)
{
        lbm_src_topic_attr_t * tattr;  /* Source topic attribute object */
        lbm_topic_t *topic;            /* Topic object */
        int err;                       /* Used for checking API return codes */

        /* =semlit,block,init_source_attr=*/
        err = lbm_src_topic_attr_create(&tattr);
        EX_LBM_CHK(err);

        err = lbm_src_topic_attr_str_setopt(tattr, "ume_store", UMP_CLEAR_STORE_CONFIG);
        EX_LBM_CHK(err);
        /* =semlit,endblock,init_source_attr=*/

        /* Assuming there are stores running on the localhost */
        /* =semlit,block,set_store=*/
        if (app_src->mode == PRIMARY) 
                err = lbm_src_topic_attr_str_setopt(tattr, "ume_store", UMP_PRIMARY_STORE);
        else
                err = lbm_src_topic_attr_str_setopt(tattr, "ume_store", UMP_SECONDARY_STORE);
        EX_LBM_CHK(err);

        if (app_src->mode == PRIMARY)
                err = lbm_src_topic_attr_str_setopt(tattr, "ume_session_id", UMP_PRIMARY_SESSION_ID);
        else
                err = lbm_src_topic_attr_str_setopt(tattr, "ume_session_id", UMP_SECONDARY_SESSION_ID);
        EX_LBM_CHK(err);
        /* =semlit,endblock,set_store=*/

        /* Need to set store behavior to Quorum-Consensus  */
        /* =semlit,block,complete_init=*/
        err = lbm_src_topic_attr_str_setopt(tattr, "ume_store_behavior", "qc");
        EX_LBM_CHK(err);

        err = lbm_src_topic_alloc(&topic, app_src->ctx, "test.topic", tattr);
        EX_LBM_CHK(err);

        err = lbm_src_create(&(app_src->src), app_src->ctx, topic, handle_src_event, app_src, NULL);
        EX_LBM_CHK(err);
        /* =semlit,endblock,complete_init=*/

        /* =semlit,block,update_state_init=*/
        app_src->state = INIT;
        /* =semlit,endblock,update_state_init=*/
}

void failover_app_src(app_src_s *app_src)
{
        int err; /* Used for checking API return codes */
        
        /* Delete the source */
        /* =semlit,block,delete_src=*/
        err = lbm_src_delete(app_src->src);
        EX_LBM_CHK(err);
        /* =semlit,endblock,delete_src=*/

        /* =semlit,block,update_state_not_init=*/
        app_src->src = NULL;
        app_src->state = NOT_INIT;
        app_src->mode = BACKUP;
        /* =semlit,endblock,update_state_not_init=*/
}

/* Provided simply for printing the state name */
/* =semlit,block,print_state_helper=*/
const char* source_state(app_src_s *app_src)
{
        switch (app_src->state)
        {
                case NOT_INIT: return "NOT_INIT";
                case INIT: return "INIT";
                case READY: return "READY";
                case UNRESP: return "UNRESP";
        }
}
/* =semlit,endblock,print_state_helper=*/

int main(int argc, char **argv)
{
        /* =semlit,block,variables=*/
        app_src_s app_src;                        /* App structure to track source */
        lbm_context_t *ctx;                     /* Context object */
        lbm_context_attr_t * cattr;             /* Context attribute object */
        int err;                                /* Used for checking API return codes */
        /* =semlit,endblock,variables=*/

#if defined(_WIN32)
        /* windows-specific code */
        WSADATA wsadata;
        int wsStat = WSAStartup(MAKEWORD(2,2), &wsadata);
        if (wsStat != 0)
        {
                printf("line %d: wsStat=%d\n",__LINE__,wsStat);
                exit(1);
        }
#endif

        /* =semlit,block,init_create_context=*/
        err = lbm_context_attr_create(&cattr);
        EX_LBM_CHK(err);

        err = lbm_context_create(&ctx, cattr, NULL, NULL);
        EX_LBM_CHK(err);
        /* =semlit,endblock,init_create_context=*/

        /* =semlit,block,init_app_src=*/
        app_src.state = NOT_INIT;
        app_src.mode = PRIMARY;
        app_src.ctx = ctx;
        /* =semlit,endblock,init_app_src=*/

        /* =semlit,block,main_send_loop=*/
        while(1)
        /* =semlit,endblock,main_send_loop=*/
        {
                /* Initialize the source if we're not initialized */
                /* =semlit,block,start_init=*/
                if (app_src.state == NOT_INIT)
                        init_src(&app_src);
                /* =semlit,endblock,start_init=*/

                /* =semlit,block,src_send=*/
                if (app_src.state == READY)
                /* =semlit,endblock,src_send=*/
                {
                        if (lbm_src_send(app_src.src, "test", 4, LBM_SRC_NONBLOCK) == LBM_FAILURE)
                        {
                                /* Assume EWOULDBLOCK and wait */
                                SLEEP_SEC(1);
                        }
                }
                else
                {
                        /* Print a warning that the source is not ready and sleep */
                        printf("Source cannot send: %d. Source State: %s\n", lbm_errnum(), source_state(&app_src));
                        /* =semlit,block,primary_unresp=*/
                        if (app_src.state == UNRESP && app_src.mode == PRIMARY)
                        {
                                printf("Primary store unresponsive, failing over to backup\n");
                                failover_app_src(&app_src);
                        }
                        /* =semlit,endblock,primary_unresp=*/
                        /* =semlit,block,backup_unresp=*/
                        else if (app_src.state == UNRESP && app_src.mode == BACKUP)
                        {
                                printf("Backup store unresponsive. Exiting\n");
                                exit(1);
                        }
                        /* =semlit,endblock,backup_unresp=*/
                        SLEEP_SEC(1);
                }
        }
        return 0;
}
