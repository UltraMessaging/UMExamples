<html>
  <head>
    <link rel="stylesheet" href="../../style/main.css" type="text/css" media="screen" />
    <title>UMP Receiver Sequence Number Info Callback</title>
  </head>
  <body>
    =semlit,include,../intro.sldoc=
    <p>There is one program source file:</p>
    <ul>
      <li><b><tt>=semlit,srcfile,seq_number_callback_java.slsrc,SeqNumberCallback.java=</tt></b>
        - (right-click and save as "SeqNumberCallback.java") main program.</li>
    </ul>
    <h2>Program explanation: <tt>SeqNumberCallback.java</tt></h2>
    <h4>Set Sequence Number Callback Attrribute</h4>
	<p>The object UMERcvRecInfo is used to configure the callback function, and is defined as a class below by implementing the LBM object
	UMERecoverySequenceNumberCallback. Once the object is set, it is passed into the setRecoverySequenceNumberCallback() method like so:</p>
	=semlit,insert,cb_attr=
    <h4>The Sequence Number Callback</h4>
	<p>Here is the actual callback function that will be executed right before registration complete. In this example, the 3 provided sequence
	numbers are printed with explanation. In a real world application, the expectation would be to simply print the sequence numbers with the 
	appropriate labels (high_sqn, low_sqn, low_rx_sqn). Also in this example, the application is blindly setting the starting sequence number to 100.
	Again, in a real world application, the user should verify the starting sequence number against some internal application logic to ensure the 
	receiver is starting at the correct sequence number.</p>
	=semlit,insert,cb=
    <h4>Handle Message Callback</h4>
        <p>This sample includes a message handler that handles the persistent registration events, success and complete. 
	<ol>
	  <li>REGISTRATION_SUCCESS - This indicates the successful registration with a <b>single</b> UMP store. 
	  <li>REGISTRATION_COMPLETE - This indicates that the receiver has registered with at least a quorum of stores and can begin
		accepting messages either via store retransmissions or from the live stream, depending on it's starting sequence number. 
	</ol>
	</p>
	<p>When using UMP, it should be a strong application requirement to handle these registration events in the code, as well as
	logging the data returned in each callback, such as registration ID's and sequence numbers. This data is absolutely crucial
	for debugging any kind of issues with related to message recovery, connectivity issues, and even performance.</p>
        =semlit,insert,handle_msg=
  </body>
</html>
