<html>
  <head>
    <link rel="stylesheet" href="../../style/main.css" type="text/css" media="screen" />
    <title>UMP Receiver Callbacks Event Logging</title>
  </head>
  <body>
    =semlit,include,../intro.sldoc=
    <p>There is one program source file:</p>
    <ul>
      <li><b><tt>=semlit,srcfile,ump_receiver_callbacks_java.slsrc,UMPReceiverCallbacks.java=</tt></b>
        - (right-click and save as "UMPReceiverCallbacks.java") main program.</li>
    </ul>
    <h2>Program explanation: <tt>UMPReceiverCallbacks.java</tt></h2>
    <h4>Context/Receiver Create</h4>
	<p>Standard context and receiver creation. Note the message handler function passed into the receiver create function, this
	is the callback function that will handle all the receiver callback events.</p>
	=semlit,insert,ctx_rcv_create=
    <h4>Handle Message Callback</h4>
        <p>Here is the message callback. The message callback function is a single function that can be coded to deal with many
	different callback events. Only a single event is processed at a time, therefore a switch statement works best for
	handling the different types of events that are possible. Below is a description of each event, as well as which data 
	is useful to log, as well as how important it is to log such data in the applications log file.</p>
      <h3>Message Data Callback (LBM.MSG_DATA)</h3>
	<p>This is the message type used for handling received messages. If your application is already printing the data from every 
	message, then it would be worth logging the Ultra Messaging sequence number, topic string, and the flags in the message data 
	structure. The sequence number can help us keep track of what messages this particular receiver consumed, the topic will help 
	identify the receiver, and the flags can identify whether the messages are coming directly from a source or being recovered from 
	a store.</p>
	<p>If your application is not regularly logging data messages because it would grow the application logs too large, then this data
	can be skipped. However, it would be useful to have the ability to enable logging as part of some kind of application debug mode.</p> 
	=semlit,insert,data=
      <h3>Request Message (LBM.MSG_REQUEST)</h3>
	<p>Similar to data messages above, the only real difference being that these messages can be responded to via the API.</p>
	=semlit,insert,request=
      <h3>Unrecoverable Loss (LBM.MSG_UNRECOVERABLE_LOSS)</h3>
	<p>This event indicates that a single message has been declared unrecoverable, and will not be received by the application. This 
	should always be logged. Unrecoverable Loss in a UMP environment is typically not expected and indicates a failure of the transport 
	level recovery, so this event should be logged every time, with the topic name, the sequence number provided, and the source information. 
	The source information will identify the source publishing the messages that have been lost.</p>
	=semlit,insert,loss=
      <h3>Unrecoverable Loss Burst (LBM.MSG_UNRECOVERABLE_LOSS_BURST)</h3>
	<p>Similar to regular loss, but indicates a larger gap of messages have been decalred unrecoverable. Same as above, this should always 
	be logged. Since this indicates a large number of messages that are unrecoverable, it is even more important to log all the data provided 
	in the message data structure (topic name, sequence number, and source information). 
	See sample <a href="../../handle_burst/java/" target="_parent">handle_burst</a> for more information on handling burst loss</p>
	=semlit,insert,burst=
      <h3>Beginning of Transport Session (LBM.MSG_BOS)</h3>
	<p>BOS indicates that a new transport session has been detected in which messages will be received on for a specific source transport. This
	callback should be logged, as it is useful when trying to debug connectivity issues. This should always be logged with the topic name and 
	source information.</p>
	=semlit,insert,bos=
      <h3>End of Transport Session (LBM.MSG_EOS)</h3>
	<p>Similar as BOS, this indicates that there has been no activity on a transport and that the transport has timed out. This should always
	be logged with the same information as BOS.</p>
	=semlit,insert,eos=
      <h3>No Source Notification (LBM.MSG_NO_SOURCE_NOTIFICATION)</h3>
	<p>The no source notifcation callback is not enabled by default, and must be configured with 
	=semlit,tooltip,../../tooltips/receiver_resolution_no_source_notification_threshold.txt,resolution_no_source_notification_threshold=.
	For more information on setting this callback, please see sample: <a href="../../no_source_notify/java/" target="_parent">no_source_notify</a>.
	Logging this callback is entirely up to the developer, however it could also be useful when trying to debug connectivity issues.</p>
	=semlit,insert,no_source=
      <h3>UMP Registration Error (LBM.MSG_UME_REGISTRATION_ERROR)</h3>
	<p>This callback event indicates an error while trying to register with a UMP store. This should be logged every time along with the topic 
	name and error string provided in the callback.</p>
	=semlit,insert,reg_error=
      <h3>UMP Registration Success (LBM.MSG_UME_REGISTRATION_SUCCESS_EX)</h3>
	<p>This callback is executed every time the receiver registers to a particular store, and very much is worth logging. In particular, the 
	topic name, store information, receiver and source RegID.s, flags, and registered sequence number. The sequence number here indicates where 
	the store thinks this receiver is at, and is one of the deciding factors when determining the starting sequence number for the receiver. The 
	source and receiver RegID are useful for tracking those components in the store log and store web-monitor.</p>
	=semlit,insert,reg_success=
      <h3>UMP Registration Complete (LBM.MSG_UME_REGISTRATION_COMPLETE_EX)</h3>
	<p>This callback is only executed once per registration, regardless of the number of stores. Complete indicates that a quorum of stores has been 
	registered, and the receiver is ready to start receiving messages. It is important to log the topic name, the source and receiver RegID.s, flags, 
	and the consensus sequence number . as this is the first sequence number the receiver should consume going forward.</p>
	=semlit,insert,reg_complete=
      <h3>UMP Deregistration Success (LBM.MSG_UME_DEREGISTRATION_SUCCESS_EX)</h3>
	<p>This callback should be logged when using the Receiver Paced Persistence mode of operation or when using the deregistration AP. It indicates 
	that the receiver deregistered from a particular store. The source and receiver RegID, sequence number, store information, and flags should be 
	logged here.</p>
	=semlit,insert,dereg_success=
      <h3>UMP Deregistration Complete (LBM.MSG_UME_DEREGISTRATION_COMPLETE_EX)</h3>
	<p>.Similar to the deregistration success callback; this callback indicates that the receiver has successfully deregistered from all stores, and 
	should be logged. Topic name and source information are sufficient for this callback.</p>
	=semlit,insert,dereg_complete=
      <h3>UMP Registration Change (LBM.MSG_UME_REGISTRATION_CHANGE)</h3>
	<p>This callback should be logged as it indicates a change in the registration status for a particular topic. Topic name, source information, and 
	the message data should be printed here. The message data will have the change that has been made to registration.</p>
	=semlit,insert,reg_change=
      <h3>Other</h3>
	<p>Lastly, it is a good idea to have a default case to log anything that the application is not expecting. As of writing this sample, there are no 
	other callbacks that could be handled for UMP. However, new callbacks are added, so it's good in the event of a library upgrade.</p>
	=semlit,insert,other=
  </body>
</html>
