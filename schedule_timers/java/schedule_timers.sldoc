<html>
  <head>
    <link rel="stylesheet" href="../../style/main.css" type="text/css" media="screen" />
    <title>Scheduling UM Timers</title>
  </head>
  <body>
    =semlit,include,../intro.sldoc=
    <p>There is one program source file:</p>
    <ul>
      <li><b><tt>=semlit,srcfile,schedule_timers_java.slsrc,ScheduleTimers.java=</tt></b>
        - (right-click and save as "ScheduleTimers.java") main program.</li>
    </ul>
    <h2>Program explanation: <tt>ScheduleTimers.java</tt></h2>
    <h4>Initializing the Context</h4>
        <p>Standard context creation code. Creating and scheduling timers only required an LBM context, no sources or receivers are needed.</p>
        =semlit,insert,ctx_create=
    <h4>Creating a Callback</h4>
	<p>The callback class defined below is the application callback that will be invoked when the scheduled timer expires. This callback will
	be executed on the UM context thread (at least for the purpose of this example it will be executed on the context thread.</p>
	=semlit,insert,timer_cb=
	<p>Note that inside the callback, the global "wait" variable is set to 0, this allows the main thread to stop tight-looping and exit.</p>
    <h4>Scheduling the Timer Callback</h4>
	<p>Here the application is actually initializing and scheduling the callback timer, set to be executed in 1000 milliseconds. The return value should be saved
	by the application in the event that the application wishes to cancel the timer before it executes. Special care must be taken when cancelling
	timer callbacks, for more information please see <a href="cancelling_timers/java/index.html>cancelling_timers</a>.</p>
	=semlit,insert,schedule_timer=
    <h4>Wait for Timer</h4>
	<p>For the purpose of this example application, it is using the global variable "wait" as a semaphore essentially. Once the timer executes, wait
	will be set to 0 and the application can cleanly exit by deleting the context.</p>
	=semlit,insert,wait=
  </body>
</html>
