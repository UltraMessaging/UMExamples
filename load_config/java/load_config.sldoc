<html>
  <head>
    <link rel="stylesheet" href="../../style/main.css" type="text/css" media="screen" />
    <title>Load Configuration File</title>
  </head>
  <body>
    =semlit,include,../intro.sldoc=
    <ul>
      <li><b><tt>=semlit,srcfile,load_config_java.slsrc,load_config.java=</tt></b>
        - (right-click and save as "load_config.java") main program.</li>
      <li><b><tt>=semlit,srcfile,../flat_config.cfg,flat_config.cfg=</tt></b></li>
      <li><b><tt>=semlit,srcfile,../xml_config.xml,xml_config.xml=</tt></b></li>
    </ul>
    <h2>Program explanation: <tt>load_config.java</tt></h2>
    <h4>Define Configuration File Names</h4>
	<p>There are certainly a lot of different methods for getting the path and name for a configuration file, however for the purposes
  	of this sample application, they are simply defined as globals:</p>
	=semlit,insert,define_configs=
	<p>Also note the LBM_APPLICATION_NAME. This is needed for loading the XML configuration file</p>
    <h4>Load Flat File</h4>
	<p>Here the application is using LBM.setConfiguration() to load the flat file "flat_config.cfg":</p>
	=semlit,insert,flat_file=
	<p>It is important to catch exceptions when loading configuration files as an error will be returned when using a malformed configuration
	file. Checking the LBM error message will elabortate on the malformed error specifically.</p>
    <h4>Load XML File</h4>
	<p>The method to load an XML configuration file is LBM.setConfigurationXml(), which has a second paramter to identify what the application
	name is to determine which configuration within the XML to load. Same as with the flate file, it is important to catch any exceptions to
	determine if there is a malformed option or issue with the XML itself:</p>
	=semlit,insert,xml_file=
    <hr>
    <h2>Configuration Explanation</h2>
    <h4>Flat Configuration File</h4>
	<p>Here are some examples on defining attributes via a flat configuration file. First, this file configures the 
	=semlit,tooltip,../../tooltips/context_resolver_multicast_address.txt,resolver_multicast_address=which is responsible for sending and
	receiving topic resolution messages to every application configured to use the same multicast address.</p>
	=semlit,insert,context=
	<p>Next, the flat file configures sources to use the reliable multicast =semlit,tooltip,../../tooltips/source_transport.txt,transport=and
	to enable the late join feature (=semlit,tooltip,../../tooltips/source_late_join.txt,late_join=)</p>
	=semlit,insert,source=
    <h4>XML Configuration File</h4>
	<p>As described above, XML files are far more powerful than flat files, and this example just scratches the surface of all the possibilties
	offered by using XML configuration files. In this example the XML file creates a template called "common", which can be used to have applications
	inherit these configurations. In this template, the LBTRM rate limiter is configured to 10gb, vs the default 10mb; 
	=semlit,tooltip,../../tooltips/context_transport_lbtrm_data_rate_limit.txt,transport_lbtrm_data_rate_limit=
	Also configured in the template are the socket buffers for both the topic resolution receive side and LBTRM receive side, or
	=semlit,tooltip,../../tooltips/context_resolver_multicast_receiver_socket_buffer.txt,resolver_multicast_receiver_socket_buffer=
	=semlit,tooltip,../../tooltips/context_transport_lbtrm_receiver_socket_buffer.txt,transport_lbtrm_receiver_socket_buffer=
	respectively (setting the transport socket buffer to 8MB over the default of 512kb):</p>
	=semlit,insert,template=
	<p>Once a template is defined, applications can be defined which can inherit the template configuration, while still configuring
	more options for finer granularity over the application. In this example, the configuration file is simply specifying that sources
	within application "processA" should enable the	=semlit,tooltip,../../tooltips/source_late_join.txt,late_join= feature:</p>
	=semlit,insert,app=
      </body>
</html>
