<html>
<head>
=semlit,include,../../style/head.sldoc=
<title>setting_attributes.java: how to configure attributes programatically</title>
</head>
<body>


<p>There is one program source file:</p>
<ul>
<li><b><tt>=semlit,srcfile,setting_attributes_java.slsrc,setting_attributes.java=</tt></b>
- (right-click and save as "setting_attributes.java") Example code.</li>
</ul>

<h2><tt>setting_attributes.java</tt></h2>

<p>The example source code is organized as a Java class.</p>

<h3>Configuring Context Attributes</h3>

<p>In order to configure a UM context, an attributes object must first be created:</p>
=semlit,insert,ctx_attr_create=

<p>When an attributes object is created, a snapshot of the current configuration is 
loaded.  In this example, the attributes contained in ctxAttr will be default.  This 
is not always the case.  If a configuration file has been loaded via the API, or set
via environmental variables, these values may not be default. </p>

<p>These attributes will be used to configure a new context:</p>

=semlit,insert,ctx_create=

<p>The constructor is passed a reference to the attributes object, letting the UM library
know that it should configure the new context with these specific attributes.</p>

<h3>Configuring Source Attributes</h3>

<p>Sources are configured slightly differently.  To create a source, a topic ojbect is 
required. So instead of passing the attributes object directly into the sources constructor,
it is used to initialized a topic object: </p>
=semlit,insert,src_attr_create=

This topic object is then used to initialize a source with the given set of attributes.

=semlit,insert,src_create=

<p>In this example a second source is configured to use a different transport_lbtrm_destination_port.
It is common for topics to be programatically configured to use different settings, and this example
demonstrates how the same source attributes object can be used to configure 2 different sources with
their own unique set of attributes:</p>

=semlit,insert,src_create2=

<h3>Cleaning Up Attributes</h3>

<p>In object oriented languages, UM uses slightly different aproach to cleaning up attributes. 
Due to shared resources with the unerdlying native C library, the .close method is used to clean
up native memory allocation.  *Attributes objects are different from other UM objects in that
they do not have .close() methods.  In order to clean them up, they can be assigned an LBMObjectRecycler 
which can be .close()d.  This is done via the setObjectRecycler method as shown below:  </p>

=semlit,insert,clean=

</body>
</html>

